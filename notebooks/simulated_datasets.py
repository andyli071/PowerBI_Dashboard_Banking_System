# -*- coding: utf-8 -*-
"""simulated_datasets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g2I-_vUyShTfswWaNMcTnLUZY7WpjHtO
"""

!pip install faker

from faker import Faker
fake = Faker()

import pandas as pd
import random

# Generate data specific to Canada:
faker = Faker('en_CA')
Faker.seed(42)
random.seed(42)

BC_CITIES = [
    "Vancouver", "Surrey", "Burnaby", "Richmond", "Coquitlam", "Langley",
    "Delta", "Abbotsford", "Kelowna", "Victoria", "Nanaimo", "Kamloops",
    "Chilliwack", "Maple Ridge", "New Westminster", "Prince George",
    "Port Coquitlam", "West Vancouver", "White Rock", "Campbell River"
]

def fake_phone_bc():
    area = random.choice(["604", "778", "236"])  # BC area codes
    prefix = random.randint(100, 999)
    line = random.randint(1000, 9999)
    return f"{area} {prefix} {line}"  # returns e.g. "6048234795"

def format_postal(code):
    clean = code.replace(" ", "")
    return clean[:3] + " " + clean[3:]

#Generate data for customers tables
num_customers = 500
customers = []

for i in range (1, 501):
    customers.append({
        "Customer_ID": i,
        "First_name": faker.first_name(),
        "Last_name": faker.last_name(),
        "Street_number": faker.building_number(),
        "Street_name": faker.street_name(),
        "City": random.choices(BC_CITIES)[0],
        "Province": "BC",
        "Postal_code": format_postal(faker.postalcode()),
        "Phone_number": fake_phone_bc(),
        "Email": faker.email()
    })

df = pd.DataFrame(customers)
df.head(5)

df

df.to_csv('customer.csv', index=False)

# Pre setup for accounts
account_type = ["chequing", "savings"]

#Generate data for accounts tables
customers_df = pd.read_csv('/content/customer.csv')
customer_ids = customers_df['Customer_ID'].tolist()

account_num_set = set
accounts = []

for customer_id in customer_ids:
    num_accounts = random.randint(1, 3)

    accounts.append({
        "Account_number":random.randint(1000, 100000),
        "Customer_ID": customer_id,
        "Account_type": random.choices(account_type)[0],
        "Account_balance": round(random.uniform(1000, 100000), 2)
    })

df = pd.DataFrame(accounts)
df.head(5)

df.to_csv('accounts.csv', index=False)

# Pre setup for transcation table
transcation_type = ["Withdrawal", "Bill Payment", "E-transfer", "Payroll", "Deposit"]

#Generate data for accounts tables
accounts_num_df = pd.read_csv('/content/accounts.csv')
account_numbers = accounts_num_df['Account_number'].tolist()

transactions = []


for acc in account_numbers:
    num_transcations = random.randint(1, 10)
    for _ in range(num_transcations):
      transactions.append({
        "Transaction_ID":random.randint(1000, 10000),
        "Account_number": acc,
        "Transcation_date": faker.date_between(start_date='-2y', end_date='today'),
        "Transaction_type": random.choices(transcation_type)[0],
        "Amount": round(random.uniform(1000, 100000), 2)
    })

df = pd.DataFrame(transactions)
df.head(5)

df.info()

df.to_csv('transcations.csv', index=False)

# Pre setup for loan table
# Define loan types with min amount, max amount, and interest rate
loan_types = {
    "Mortgage": {"min_amount": 100000, "max_amount": 1000000, "interest_rate": 0.05},
    "Car Loan": {"min_amount": 5000, "max_amount": 50000, "interest_rate": 0.03},
    "Personal Loan": {"min_amount": 1000, "max_amount": 10000, "interest_rate": 0.02}
    }

# Define Loan_id format
loan_number_format = {
    "Mortgage": "M",
    "Car Loan": "CL",
    "Personal Loan": "PL"
    }

# Define amortization in month
amortization_month = [12, 24, 36, 48, 60, 96, 120, 180]

# Define monthly payment calculation
def monthly_payment(principal, interest_rate, amortization):
    monthly_interest_rate = interest_rate / 12
    monthly_payment = principal * (monthly_interest_rate * (1 + monthly_interest_rate) ** amortization) / ((1 + monthly_interest_rate) ** amortization - 1)
    return round(monthly_payment, 2)

#Generate data for loan tables
customers_df = pd.read_csv('/content/customer.csv')
customer_ids = customers_df['Customer_ID'].tolist()

loans = []
loan_number_counter = 1

for customer_id in customer_ids:
    num_loans = random.randint(0, 2)

    for _ in range(num_loans):
        loan_type = random.choice(list(loan_types.keys()))

        min_amount = loan_types[loan_type]["min_amount"]
        max_amount = loan_types[loan_type]["max_amount"]
        interest_rate = loan_types[loan_type]["interest_rate"]

        principal = round(random.uniform(min_amount, max_amount), 2)
        amortization = random.choice(amortization_month)

        loan_number = f"L{loan_number_counter:03d}{loan_number_format[loan_type]}"
        loan_number_counter += 1

        loans.append({
            "Loan_number": loan_number,
            "Customer_ID": customer_id,
            "Loan_type": loan_type,
            "Principal_amount": principal,
            "Interest_rate": round(interest_rate * 100, 2),  # percent format
            "Amortization_period": amortization,
            "Monthly_payment_amount": monthly_payment(principal, interest_rate, amortization)
        })

df = pd.DataFrame(loans)
df.head(5)

df.to_csv('loans.csv', index=False)